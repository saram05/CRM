@page "/"
@layout LoginLayout

@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

<div class="body">
    <EditForm Model="loginDTO" OnValidSubmit="LoginAsync">
        <DataAnnotationsValidator />

        <div class="contenedor">
            <div class="contenedor-img">
                <img src="logotipo-arana.png" alt="Imagen del logo de la página" />
            </div>
            <b><h2>Login - CRM Spider</h2></b>
            <div class="card-body">
                <div class="mb-3">
                    <div>
                        <InputText placeholder="Email" class="form-control" @bind-Value="@loginDTO.Email" />
                        <ValidationMessage For="@(() => loginDTO.Email)" />
                    </div>
                </div>
                <div class="mb-3">
                    <div>
                        <InputText type="password" placeholder="Contraseña" class="form-control" @bind-Value="@loginDTO.Password" />
                        <ValidationMessage For="@(() => loginDTO.Password)" />
                    </div>
                </div>
            </div>
            <div class="justify-content-center">
                <button class="btn btn-primary" type="submit">Iniciar Sesión</button>
            </div>

            <a href="Register" class="nav-link btn btn-link">Registrarse</a>
        </div>
    </EditForm>
</div>
@code {
    private LoginDTO loginDTO = new();

    private async Task LoginAsync()
    {
        var responseHttp = await repository.Post<LoginDTO, TokenDTO>("/api/accounts/Login", loginDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/Index");
    }
}
