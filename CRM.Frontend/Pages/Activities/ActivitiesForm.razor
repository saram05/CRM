@inject SweetAlertService sweetAlertService
@inject IRepository repository
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@attribute [Authorize]

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>


<EditForm OnValidSubmit="OnValidSubmit" Model="Activity">
    <DataAnnotationsValidator />
    <div class="mb-3">

        <label>Descripción</label>
        <div>
            <InputText class="form-control" @bind-Value="@Activity.Name" />
            <ValidationMessage For="@(() => Activity.Name)" />
        </div>
        <label>Oportunidad</label>
        <div>
            <select class="form-select" @bind="Activity.OportunityId">
                <option value="0">-- Seleccione la oportunidad --</option>
                @if (oportunities is not null)
                {
                    @foreach (var oportunity in oportunities)
                    {
                        <option value="@oportunity.Id">@oportunity.Name</option>
                    }
                }
            </select>
        </div>
        <label>Fecha de inicio</label>
        <div>
            <InputDate class="form-control" @bind-Value="@Activity.StartDate" />
            <ValidationMessage For="@(() => Activity.StartDate)" />
        </div>
        <label>Fecha fin</label>
        <div>
            <InputDate class="form-control" @bind-Value="@Activity.FinishDate" />
            <ValidationMessage For="@(() => Activity.FinishDate)" />
        </div>
        <label>Tipo de actividad</label>
        <div>
            <select class="form-select" @bind="Activity.Type">
                <option value="0">-- Seleccione --</option>
                <option value="1">Reunión</option>
                <option value="2">Visita</option>
                <option value="3">Llamada</option>
                <option value="4">Email</option>
            </select>
        </div>
        <label>Observaciones</label>
        <div>
            <InputTextArea class="form-control" @bind-Value="@Activity.Observations" />
            <ValidationMessage For="@(() => Activity.Observations)" />
        </div>
        <br />
        <button class="btn btn-primary" type="submit">Guardar Cambios</button>
        <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
    </div>
</EditForm>

@code {
    private EditContext editContext = null!;
    private List<Oportunity>? oportunities;

    [EditorRequired]
    [Parameter]
    public Activity Activity { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        await LoadClientsAsync();
    }

    private async Task LoadClientsAsync()
    {
        var responseHttp = await repository.Get<List<Oportunity>>("/api/oportunities/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        oportunities = responseHttp.Response;
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
