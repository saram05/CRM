@inject SweetAlertService sweetAlertService
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@attribute [Authorize]

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>


<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Nombre</label>
        <div>
            <InputText class="form-control" @bind-Value="@Client.Name" />     
            <ValidationMessage For="@(() => Client.Name)" />
        </div>
        <label>Documento</label>
        <div>
            <InputText class="form-control" @bind-Value="@Client.Document" />
            <ValidationMessage For="@(() => Client.Document)" />
        </div>
        <label>Dirección</label>
        <div>
            <InputText class="form-control" @bind-Value="@Client.Address" />
            <ValidationMessage For="@(() => Client.Address)" />
        </div>
        <label>Teléfono</label>
        <div>
            <InputText class="form-control" @bind-Value="@Client.PhoneNumber" />
            <ValidationMessage For="@(() => Client.PhoneNumber)" />
        </div>
        <label>Email</label>
        <div>
            <InputText class="form-control" @bind-Value="@Client.Email" />
            <ValidationMessage For="@(() => Client.Email)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(Client);
    }

    [EditorRequired]
    [Parameter]
    public Client Client { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
